buildscript {
    ext { springBootVersion = '1.5.2.RELEASE' }
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'announce'
apply plugin: 'jacoco'



group = 'au.com.mountainpass'
project.version = '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

repositories {
    mavenLocal()
    jcenter()
    // codacy uses com.typesafe.netty:netty-http-pipelining, which
    // can be found here
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

eclipseProject {
    doLast {
        // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

        def props = new Properties()
        file(".settings/org.eclipse.jdt.core.prefs").withInputStream { stream ->
            props.load(stream)
        }
        props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
        file(".settings/org.eclipse.jdt.core.prefs").withOutputStream { stream ->
            props.store(stream, null)
        }
    }
}

springBoot  { buildInfo() }

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

artifacts { archives sourcesJar //    archives javadocJar
}

configurations {
    providedRuntime
    codacy
}


dependencies {
    compile('commons-lang:commons-lang:2.6')
    compile('commons-io:commons-io:2.5')
    
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-jdbc')
    compile('com.github.spullara.mustache.java:compiler:0.9.2')

    compile("org.springframework.boot:spring-boot-devtools")


    compile 'de.otto.edison:edison-hal:1.0.0.RC5'

    compile group: 'org.webjars', name: 'swagger-ui', version: '2.2.10'

    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.1'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.1'

    compile('org.apache.httpcomponents:httpasyncclient')

    compile('org.webjars:bootstrap:3.3.7-1')
    compile('org.webjars:jquery:3.1.1-1')
    compile('org.webjars.bower:angularjs:1.6.0')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'info.cukes', name: 'cucumber-junit', version:'1.2.5'
    testCompile group: 'info.cukes', name: 'cucumber-spring', version:'1.2.5'

    testCompile ('org.seleniumhq.selenium:selenium-java:3.0.1') { exclude(module: 'commons-logging') }
    testCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.0.1'
    testCompile 'com.saucelabs:sauce_junit:2.1.20'
    testCompile 'com.saucelabs:ci-sauce:1.123'

    testCompile 'org.bouncycastle:bcpkix-jdk15on:1.53'
    testCompile('io.swagger:swagger-parser:1.0.22')
    
    testCompile group: 'io.prometheus', name: 'simpleclient', version: '0.0.21'

    
    runtime('com.h2database:h2')
    runtime group: 'mysql', name: 'mysql-connector-java', version: '5.1.39'
    
    
    
    codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '1.0.10'


    
}


test { exclude '**' }

def testOutputDir = project.getProperties().get("testOutputDir") ?: "${buildDir}"
def coverageOutputDir = project.getProperties().get("coverageOutputDir") ?: "${buildDir}"
def SAUCE_LABS_USERNAME = project.getProperties().get("SAUCE_LABS_USERNAME") ?: ""
def SAUCE_LABS_KEY = project.getProperties().get("SAUCE_LABS_KEY") ?: ""
Boolean withSauce = project.getProperties().get("withSauce") ?: false

jacoco {
    toolVersion = "0.7.7.201606060606"
    reportsDir = file("${buildDir}/test-results/jacoco")
}



task unitTest(type: Test, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include 'RyvrUnitTests.class'
    ext.outputDir = "${testOutputDir}/test-results-ut"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-ut"
    outputs.dir file(coverageDir)
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}

task mySqlUnitTest(type: Test, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include 'RyvrUnitTests_MySql.class'
    ext.outputDir = "${testOutputDir}/test-results-ut-mysql"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-ut-mysql"
    outputs.dir file(coverageDir)
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}


task systemTest(type: Test, dependsOn : unitTest, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${testOutputDir}/test-results-st"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-st"
    outputs.dir file(coverageDir)
    include 'RyvrSystemTests.class'
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}

task uiTest(type: Test, dependsOn : systemTest, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${testOutputDir}/test-results-ui"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-ui"
    outputs.dir file(coverageDir)
    include 'RyvrUiTests.class'
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    if(withSauce) {
        systemProperty 'spring.profiles.active',  "sauceLabs"
        systemProperty 'webdriver.sauce.labs.username',  "${SAUCE_LABS_USERNAME}"
        systemProperty 'webdriver.sauce.labs.key',  "${SAUCE_LABS_KEY}"
    }
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}

task mobileUiTest(type: Test, dependsOn : uiTest, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${testOutputDir}/test-results-mobile-ui"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-mobile-ui"
    outputs.dir file(coverageDir)
    include 'RyvrUiTests_Mobile.class'
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    if(withSauce) {
        systemProperty 'spring.profiles.active',  "sauceLabs"
        systemProperty 'webdriver.sauce.labs.username',  "${SAUCE_LABS_USERNAME}"
        systemProperty 'webdriver.sauce.labs.key',  "${SAUCE_LABS_KEY}"
    }
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}


task firefoxUiTest(type: Test, dependsOn : uiTest, group: 'verification') {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    ext.outputDir = "${testOutputDir}/test-results-firefox-ui"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-firefox-ui"
    outputs.dir file(coverageDir)
    include 'RyvrUiTests_Firefox.class'
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    if(withSauce) {
        systemProperty 'spring.profiles.active',  "sauceLabs"
        systemProperty 'webdriver.sauce.labs.username',  "${SAUCE_LABS_USERNAME}"
        systemProperty 'webdriver.sauce.labs.key',  "${SAUCE_LABS_KEY}"
    }
    jacoco {
        append = false
        destinationFile = file("${coverageDir}/jacoco/${name}.exec")
    }
}

test.dependsOn {
    tasks.findAll { task ->  task.name.endsWith('Test') }
}

task testLocal(group: 'verification') {
}

testLocal.dependsOn {
    tasks.findAll { task ->  task.name.endsWith('Test') && task.name !=  'mobileUiTest' && task.name !=  'firefoxUiTest' }
}


jacocoTestReport {
    executionData = fileTree(dir: "${coverageOutputDir}", include: '**/jacoco/*.exec')

    reports {
        xml.enabled true
        xml.destination "${coverageOutputDir}/coverage-results/jacoco/${archivesBaseName}.xml"
        csv.enabled false
        html.enabled true
        html.destination "${coverageOutputDir}/coverage-results/jacoco/html"
    }

    doLast {
        def report = reports.xml.destination
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if( it == null ) {
                return 100
            }
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
            'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
            'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
            'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
            'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
            'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
            'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        def success = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
            else {
                success.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        logger.quiet("------------------ Code Coverage Passes -----------------------")
        success.each { logger.quiet(it) }
        logger.quiet("---------------------------------------------------------------")
        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each { logger.quiet(it) }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

ext {
    // TODO: Increase these
    limits = [
        'instruction': 75,
        'branch'     : 75,
        'line'       : 75,
        'complexity' : 75,
        'method'     : 75,
        'class'      : 75
    ]
}


unitTest.finalizedBy jacocoTestReport
systemTest.finalizedBy jacocoTestReport
uiTest.finalizedBy jacocoTestReport
mobileUiTest.finalizedBy jacocoTestReport


task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
        "-l",
        "Java",
        "-r",
        "${coverageOutputDir}/coverage-results/jacoco/${archivesBaseName}.xml"
    ]
}

jar {
    manifest {
        attributes("Implementation-Title": "Ryvr",
                   "Implementation-Version": version)
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        announce.announce("':${task.name}' FAILED", "local")
    }
    else {
        announce.announce("':${task.name}' succeeded", "local")
    }
}

