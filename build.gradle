buildscript {
  // spring boot 1.5.3+ is broken for undertow using SSL
  ext { springBootVersion = '1.5.2.RELEASE' }
  repositories {
    jcenter()
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath('gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17')
    classpath 'co.riiid:gradle-github-plugin:0.4.2'
    classpath 'net.masterthought:cucumber-reporting:3.7.0'
    // for later https://github.com/stempler/gradle-versioneye-plugin
  }
}

plugins {
  id "com.srcclr.gradle" version "2.2.7"
  id "com.dorongold.task-tree" version "1.3"
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'announce'
apply plugin: 'jacoco'
apply plugin: 'co.riiid.gradle'
apply plugin: 'application'


group = 'au.com.mountainpass'

println "System.env.CI: ${System.env.CI}"
def ci = System.env.CI == 'true'
if( ci ) {
  try {
    new URL("https://api.github.com/repos/mountain-pass/ryvr/releases").withInputStream{ i ->
      def slurper = new groovy.json.JsonSlurper().setType(groovy.json.JsonParserType.INDEX_OVERLAY);
      def result = slurper.parseText(i.getText())
      def latestVersion = result[0].tag_name
      println "latestVersion: ${latestVersion}"
      def splitVerison = latestVersion.split("\\.")
      splitVerison[1] = (splitVerison[1] as Integer) + 1
      project.version = "${splitVerison[0]}.${splitVerison[1]}.${splitVerison[2]}"
      i.close()
    }
  }
  catch( java.io.FileNotFoundException e ) {
    println e.message
    project.version = '1.0.0'
  }
}
else {
  project.version = 'LOCAL'
}

println "${project.name} version: ${project.version}"

ext {
  releaseNotes = new File("RELEASE_NOTES-v${project.version}.md")
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

repositories {
  mavenLocal()
  jcenter()
  // codacy uses com.typesafe.netty:netty-http-pipelining, which
  // can be found here
  maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

eclipseProject {
  doLast {
    // https://discuss.gradle.org/t/how-to-write-properties-to-3rd-party-eclipse-settings-files/6499/2

    def props = new Properties()
    file(".settings/org.eclipse.jdt.core.prefs").withInputStream { stream ->
      props.load(stream)
    }
    props.setProperty("org.eclipse.jdt.core.compiler.codegen.methodParameters", "generate")
    file(".settings/org.eclipse.jdt.core.prefs").withOutputStream { stream ->
      props.store(stream, null)
    }
  }
}

springBoot  { buildInfo() }

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}


applicationDistribution.from("LICENSE") { into "." }


bootRun.doFirst() {
  applicationDefaultJvmArgs = [
    "-Dserver.ssl.key-store=${buildDir}/keystore.jks",
    "-Dlogging.path=${buildDir}/logs",
    "-Dserver.undertow.accesslog.dir=${buildDir}/logs"
    // TODO javaagent: "-javaagent:${jacocoAgent}=destfile=${coverageOutputDir}/coverage-results-${testclass}/jacoco/${testclass}-server.exec"
  ]}

applicationDefaultJvmArgs = [
  "-Dspring.config.location=file:../etc/application.yml",
  "-Dlogging.config=file:../etc/logback.xml"
]

distTar {
  compression Compression.GZIP
  extension "tar.gz"
}

artifacts { archives sourcesJar  }

configurations {
  providedRuntime
  codacy
}




dependencies {
  compile('commons-io:commons-io:2.5')

  compile('org.springframework.boot:spring-boot-starter-actuator')
  compile('org.springframework.boot:spring-boot-starter-web') { exclude(module: 'spring-boot-starter-tomcat') }
  compile('org.springframework.boot:spring-boot-starter-undertow')
  compile('org.springframework.boot:spring-boot-starter-jdbc')
  compile('org.springframework.boot:spring-boot-autoconfigure')




  compile('com.github.spullara.mustache.java:compiler:0.9.5')

  //compile("org.springframework.boot:spring-boot-devtools")


  compile 'de.otto.edison:edison-hal:1.0.0.RC5'

  compile group: 'org.webjars', name: 'swagger-ui', version: '3.1.5'

  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  compile group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

  compile('org.apache.httpcomponents:httpasyncclient')
  compile('org.apache.httpcomponents:httpclient-cache:4.5.3')


  compile('org.webjars:webjars-locator:0.32-1')
  compile 'org.webjars:requirejs:2.3.3'
  compile('org.webjars:bootstrap:3.3.7-1')
  compile('org.webjars:jquery:3.2.1')
  compile('org.webjars:angularjs:1.6.4')

  // For when we want to use Let's Encrypt certs.
  //compile group: 'org.shredzone.acme4j', name: 'acme4j-client', version: '0.10'

  compile group: 'org.keycloak', name: 'keycloak-common', version: '3.2.1.Final'

  compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'

  compile 'commons-collections:commons-collections:3.2.2'

  // For when we want to automatically refresh when there is new data
  //compile group: 'com.github.shyiko', name: 'mysql-binlog-connector-java', version: '0.13.0'


  // for escaping json values
  // performance testing showed:
  // - org.json:json:20170516 is faster than org.unbescape:unbescape:1.1.5.RELEASE
  // - org.apache.commons:commons-text:1.1:StringEscapeUtils.ESCAPE_JSON.translate(CharSequence, writer) is faster than org.json:json:20170516
  // - org.apache.commons:commons-text:1.1:StringEscapeUtils.escapeJson(String) is faster than org.apache.commons:commons-text:1.1:StringEscapeUtils.ESCAPE_JSON.translate(CharSequence, writer)
  // - org.apache.commons:commons-text:1.1:StringEscapeUtils.escapeJson(String) is faster than com.googlecode.json-simple:1.1.1
  // - org.apache.commons:commons-text:1.1:StringEscapeUtils.escapeJson(String) is faster than net.minidev:json-smart:2.3
  // - org.apache.commons:commons-text:1.1:StringEscapeUtils.escapeJson(String) is faster org.apache.commons:commons-text:1.1:StringEscapeUtils.escapeJson(String)
  // results with other test data may vary
  //compile group: 'org.apache.commons', name: 'commons-text', version: '1.1'
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'



  // we use the MockHttpServletRequest for the HttpController.
  // Change this back to a testCompile dependency when we have
  // removed the use of the Mock.
  compile('org.springframework.boot:spring-boot-starter-test')




  testCompile group: 'info.cukes', name: 'cucumber-junit', version:'1.2.5'
  testCompile group: 'info.cukes', name: 'cucumber-spring', version:'1.2.5'

  testCompile ('org.seleniumhq.selenium:selenium-java:3.5.1') { exclude(module: 'commons-logging') }
  testCompile 'org.seleniumhq.selenium:selenium-firefox-driver:3.5.1'


  testCompile 'com.saucelabs:sauce_junit:2.1.23'
  testCompile 'com.saucelabs:ci-sauce:1.128'


  testCompile('io.swagger:swagger-parser:1.0.32')
  testCompile 'org.hamcrest:hamcrest-junit:2.0.0.0'
  testCompile group: 'io.prometheus', name: 'simpleclient', version: '0.0.26'

  runtime('com.h2database:h2')
  runtime group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
  runtime group: 'org.postgresql', name: 'postgresql', version: '42.1.4'

  runtime 'org.jacoco:org.jacoco.agent:0.7.9:runtime'


  codacy group: 'com.codacy', name: 'codacy-coverage-reporter', version: '2.0.0' // 2.0.0
}

configurations.all {
  resolutionStrategy.eachDependency { DependencyResolveDetails details ->
    if (details.requested.group == 'com.google.guava' && details.requested.name == 'guava' && details.requested.version == '23.0') {
      // had compatibility issues with selenium 3.5.1 which uses guava 23.0
      details.useVersion '22.0'
    }
  }
}

configurations.findAll().each { config ->
  task "downloadDependencies${config.name}"(type: Exec, group: 'build', description: "download deps for ${config.name}") {
    //    println "${config}:"
    //    config.allArtifacts.getFiles().each { file -> println " " + file}
    //    config.files().each { file -> println " " + file}
    //    println ' '
    config.files
    commandLine 'echo', "Downloaded all dependencies for ${config.name}"
  }
}

task "downloadDependencies"(type: Exec, group: 'build', description: "download all deps") { commandLine 'echo', "Downloaded all dependencies" }

downloadDependencies.dependsOn {
  tasks.findAll { task ->
    task.name.startsWith('downloadDependencies') && task.name != "downloadDependencies" }
}

bootRun {
  String activeProfile =  System.properties['spring.profiles.active']
  String confLoc = System.properties['spring.config.location']
  systemProperty "spring.profiles.active", activeProfile
  systemProperty "spring.config.location", confLoc
}

task "unzipDistZip" (type: Copy, dependsOn: 'distZip', group: 'distribution') {
  def zipFile = distZip.outputs.files.singleFile
  def outputDir = zipFile.parent
  ext.outputDir = outputDir
  from zipTree(zipFile)
  into outputDir
  doLast {
    copy {
      from("${outputDir}/ryvr-${project.version}")
      into("${outputDir}/ryvr")
    }
  }
}


test { exclude '**' }

new ByteArrayOutputStream().withStream { os ->
  def result = exec {
    executable = 'whoami'
    standardOutput = os
  }
  ext.whoami = os.toString().trim()
}

if(file("gradle-${whoami}.properties").exists()) {
  file("gradle-${whoami}.properties").withReader { reader ->
    def userProps = new Properties()
    userProps.load(reader)
    userProps.each { prop ->
      project.ext.set(prop.key, prop.value)
    }
  }
}


def testOutputDir = project.getProperties().get("testOutputDir") ?: "${buildDir}"
def coverageOutputDir = project.getProperties().get("coverageOutputDir") ?: "${buildDir}"
def SAUCE_LABS_USERNAME = project.getProperties().get("SAUCE_LABS_USERNAME") ?: ""
def SAUCE_LABS_KEY = project.getProperties().get("SAUCE_LABS_KEY") ?: ""
Boolean withSauce = project.getProperties().get("withSauce") ?: false


task "distZipRun"(type: Exec, group: 'application', description: "run this project via the distZip", dependsOn: 'unzipDistZip') {
  workingDir "${unzipDistZip.outputDir}/ryvr/bin"
  def jacocoAgent = ""
  configurations.runtime.resolve().each {
    String absolutPath=it.getAbsolutePath();
    if(absolutPath.contains("org.jacoco/org.jacoco.agent/") && absolutPath.endsWith("-runtime.jar")){
      jacocoAgent = absolutPath
    }
  }
  //RYVR_OPTS
  if( project.hasProperty("testclass") ) {
    mkdir "${coverageOutputDir}/coverage-results-${testclass}/jacoco"
    environment RYVR_OPTS: "-javaagent:${jacocoAgent}=destfile=${coverageOutputDir}/coverage-results-${testclass}/jacoco/${testclass}-server.exec"
  }
  else {
    mkdir "${coverageOutputDir}/coverage-results-distZipRun/jacoco"
    environment RYVR_OPTS: "-javaagent:${jacocoAgent}=destfile=${coverageOutputDir}/coverage-results-distZipRun/jacoco/distZipRun.exec"
  }
  commandLine "${unzipDistZip.outputDir}/ryvr/bin/ryvr"
}


jacoco {
  toolVersion = "0.7.7.201606060606"
  reportsDir = file("${buildDir}/test-results/jacoco")
}


def testClasses = fileTree("src/test/java") {
  // include { details -> details.file.text.contains('@RunWith(SpringProfileCucumber.class)') }
  include '**/*Tests*.java'
  exclude '**/*_Current.java'
}

import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.ReportBuilder;
import net.masterthought.cucumber.ReportResult;
import net.masterthought.cucumber.Reportable;

testClasses.each { File testClass ->
  def baseName = testClass.name.replace('.java', '')
  task "test${baseName}"(type: Test, group: 'verification', description: "run ${baseName}") {
    testClassesDir = sourceSets.test.output.classesDir
    classpath = sourceSets.test.runtimeClasspath
    include "**/${baseName}.class"
    ext.outputDir = "${testOutputDir}/test-results/test${baseName}"
    outputs.dir file(outputDir)
    ext.coverageDir = "${coverageOutputDir}/coverage-results-${baseName}"
    outputs.dir file(coverageDir)
    systemProperty 'cucumber.options',  "--plugin json:${outputDir}/cucumber.json --plugin html:${outputDir}/html --plugin junit:${outputDir}/TEST-cucumber.xml"
    systemProperty 'SAUCE_LABS_USERNAME',  "${SAUCE_LABS_USERNAME}"
    systemProperty 'SAUCE_LABS_KEY',  "${SAUCE_LABS_KEY}"
    systemProperty 'au.com.mountainpass.ryvr.test.jar', jar.outputs.files.singleFile
    systemProperty 'jacoco.destinationFile', "${coverageDir}/jacoco/${baseName}.exec"
    jacoco {
      append = false
      destinationFile = file("${coverageDir}/jacoco/${baseName}.exec")
    }
    doLast {
      File reportOutputDirectory = new File(outputDir);
      List<String> jsonFiles = new ArrayList<>();
      jsonFiles.add((String)(outputDir + "/cucumber.json"));

      Configuration configuration = new Configuration(reportOutputDirectory, 'ryvr');
      configuration.setRunWithJenkins("${System.env.CI}");
      configuration.setBuildNumber("${System.env.CIRCLE_BUILD_NUM}");
      // addidtional metadata presented on main page
      //        configuration.addClassifications("Platform", "Windows");
      //        configuration.addClassifications("Browser", "Firefox");
      configuration.addClassifications("Branch", "${System.env.CIRCLE_BUILD_NUM}");


      ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration);
      Reportable result = reportBuilder.generateReports();
      // and here validate 'result' to decide what to do
      // if report has failed features, undefined steps etc
    }

    ignoreFailures = true
  }
}

test { ignoreFailures = true }
test.finalizedBy jacocoTestReport

test.dependsOn {
  tasks.findAll { task ->
    task.name.startsWith('test') && task.name != "test" && project.hasProperty("${task.name}.enabled") && project.ext.properties["${task.name}.enabled"]=='true' }
}


jacocoTestReport {
  executionData = fileTree(dir: "${coverageOutputDir}", include: '**/jacoco/*.exec')
  additionalSourceDirs = files(sourceSets.test.allJava.srcDirs)
  additionalClassDirs = files(sourceSets.test.output)
  additionalSourceDirs.each { File f -> println "additionalSourceDirs: ${f}" }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: 'au/com/mountainpass/ryvr/steps/coverage/**')
    })
  }
  reports {
    xml.enabled true
    xml.destination "${coverageOutputDir}/coverage-results/jacoco/ryvr.xml"
    csv.enabled false
    html.enabled true
    html.destination "${coverageOutputDir}/coverage-results/jacoco/html"
  }

}




task uploadCoverageToCodacy(type: JavaExec, dependsOn : jacocoTestReport) {
  main = "com.codacy.CodacyCoverageReporter"
  def token = project.getProperties().get("CODACY_PROJECT_TOKEN") ?: "NOT SET"
  classpath = configurations.codacy
  args = [
    "-l",
    "Java",
    "-r",
    "${coverageOutputDir}/coverage-results/jacoco/ryvr.xml",
    "--projectToken",
    "${token}"
  ]
}

jar {
  manifest {
    attributes("Implementation-Title": "Ryvr",
    "Implementation-Version": project.version)
  }
}

if( project.releaseNotes.exists() ) {
  github {
    owner = 'mountain-pass'
    repo = 'ryvr'
    token = project.hasProperty('githubToken') ? project.getProperty('githubToken') : 'NOTSET'
    tagName = "${project.version}"
    targetCommitish = 'master'
    name = "v${project.version}"

    body = file(releaseNotes.path).text
    assets = [
      "build/distributions/ryvr-${project.version}.zip",
      "build/distributions/ryvr-${project.version}.tar.gz"
    ]
    prerelease = false
    draft = true
  }
  githubRelease.dependsOn bootRepackage
}


task printOutputs(group: 'build') {
  doLast {
    println jar.outputs.files.singleFile
  }
}

srcclr {
  apiToken = project.getProperties().get("srcClrApiToken") ?: "NOT SET"
}


gradle.taskGraph.afterTask { Task task, TaskState state ->
  if (state.failure) {
    announce.announce("':${task.name}' FAILED", "local")
  }
  else {
    announce.announce("':${task.name}' succeeded", "local")
  }
}

